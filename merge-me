#!/usr/bin/env bash

function exit_with_err_msg() {
  echo >&2 -e "\\033[41m\\033[1mError\\033[0m $1"
  exit 1
}

function debug_msg() {
  if [[ "$DEBUG" = true ]]; then
    if [ -t 0 ]; then
      if [ $# -gt 0 ]; then
        echo >&2 -ne "\\033[42m\\033[1mDebug\\033[0m "
        echo >&2 "$*"
      fi
    else
      local input
      read -r input
      if [[ -n "$input" ]]; then
        echo >&2 -ne "\\033[42m\\033[1mDebug\\033[0m "
        echo >&2 "$input"
      fi
    fi
  fi
}

function info_msg() {
  if [ -t 0 ]; then
    if [ $# -gt 0 ]; then
      echo >&2 -ne "\\033[44m\\033[1mInfo\\033[0m "
      echo >&2 "$*"
    fi
  else
    local input
    read -r input
    if [[ -n "$input" ]]; then
      echo >&2 -ne "\\033[44m\\033[1mInfo\\033[0m "
      echo >&2 "$input"
    fi
  fi
}

function cmd_exists_or_fail() {
  debug_msg "Checking for command: $1"
  command -v "$1" >/dev/null 2>&1 || exit_with_err_msg "Could not find command: $1"
}

function dir_exists_or_fail() {
  debug_msg "Checking for directory: $1"
  [[ -d "$1" ]] || exit_with_err_msg "Could not find directory: $1"
}

function dir_not_exists_or_fail() {
  debug_msg "Checking for directory: $1"
  [[ -d "$1" ]] && exit_with_err_msg "Directory already exists: $1"
}

function clean_up() {
  debug_msg "Cleaning up"
  rm -rf "$tmp" || exit_with_err_msg "Could not remove directory: $tmp"
  cd "$initial_wd" || exit_with_err_msg "Could not navigate to initial pwd"
}
trap "clean_up" EXIT

function extract_info_from_col_path() {
  local col_dir_path col_dir_basename col_legacy_id col_version

  col_dir_path=$1
  col_dir_basename=$(basename "$1")
  col_legacy_id=${col_dir_basename%%_*}
  col_version=${col_dir_basename##*_}

  debug_msg "Got basename $col_dir_basename from $col_dir_path"
  debug_msg "Detected collection legacy id: $col_legacy_id"
  debug_msg "Detected collection version: $col_version"

  echo "$col_legacy_id" "$col_version"
}

function make_temp() {
  info_msg "Making temp directory: $tmp"
  mkdir "$tmp" || exit_with_err_msg "Could not create directory: $tmp"
}

function populate_temp() {
  debug_msg "Populating temp directory"
  local col_info col_legacy_id col_version

  col_info="$(extract_info_from_col_path "$col_path")"
  read -r col_legacy_id col_version <<< "$col_info"

  info_msg "Copying collection with user changes into temp"
  cp -r "$col_path" "${tmp}/mine"

  info_msg "Fetching latest into temp"
  neb get "$neb_env" "$( [[ "$HUMAN" = true ]] && echo "-t" )" "$col_legacy_id" latest -d "${tmp}/theirs" || exit_with_err_msg "Fetch failed."

  info_msg "Fetching parent version into temp"
  neb get "$neb_env" "$( [[ "$HUMAN" = true ]] && echo "-t" )" "$col_legacy_id" "$col_version" -d "${tmp}/parent" <<< "y" || exit_with_err_msg "Fetch failed."
}

function merge() {
  cd "$tmp" || exit_with_err_msg "Could not navigate to temp directory"

  cd parent || exit_with_err_msg "Navigation error: $(pwd)/parent"

  info_msg "Initializing git in parent"
  git init |& debug_msg
  git add . |& debug_msg
  git commit -m "parent" |& debug_msg
  git checkout -b mine |& debug_msg
  git checkout -b theirs |& debug_msg

  info_msg "Resolving head changes"
  rm -rf ./* |& debug_msg
  cp -r ../theirs/* . |& debug_msg
  git add :/ |& debug_msg
  git commit -m "theirs" |& debug_msg
  git checkout mine |& debug_msg

  info_msg "Resolving local changes"
  rm -rf ./* |& debug_msg
  cp -r ../mine/* . |& debug_msg
  git add :/ |& debug_msg
  git commit -m "mine" |& debug_msg

  info_msg "Merging"
  git rebase --strategy-option=ours theirs 2>/dev/null

  debug_msg "Trying to force the rebase through. A failure is ok"
  git rebase --continue |& debug_msg

  cd "$initial_wd" || exit_with_err_msg "Could not navigate to initial pwd"
}

function copy_merge_to_out() {
  debug_msg "Copying merged directory as desired output directory"
  cp -r "${tmp}/parent" "$out_dir"
}

col_path=$1
neb_env=$2
out_dir=$3
initial_wd=$(pwd)
tmp="${initial_wd}/.merge-me-tmp"

[[ "$DEBUG" = true ]] && export DEBUG=true

cmd_exists_or_fail neb
cmd_exists_or_fail git
dir_exists_or_fail "$col_path"
dir_not_exists_or_fail "$out_dir"

make_temp
populate_temp
merge
copy_merge_to_out
info_msg "Done - Output in directory: $out_dir"
